tuning bug -- UBX
tune to 50.150 (at center) then
50.096 and get the deadly red band.


 ( 12 + 144 + 20 + 3 * sqrt(4) ) / 7) + 5 * 11 = 9 ^ 2 + 0

limeric
a dozen a gross and a score
plus three times the square root of four
divided by seven
plus five times eleven

last line:  "is nine squared and not a bit more"

--------------------

Loopback audio modifications

There are applications for SoDaRadio that require it to send
its audio to a loopback device so that another program can
process it (e.g. fldigi, wsjt...) and to listen on a loopback
device to handle audio produced by a second program.

ALSA isn't very helpful, and we're not going back to PA.

There are lots of ways to do fancy configuration in ALSA to
make this work, but alas, all of them are delicate, poorly documented,
irrational, and <rant> generally representative of the sorry state of linux
audio support. </endrant>

The simple thing would be to have AudioRX open two outbound ports, and
AudioTX open two inbound ports.   Sigh, that doesn't work for spit.
ALSA doesn't like two ports open from the same process.  

I could modify Audio?X to disconnect from one port and open another, and
that sounds like the simplest choice...

Sigh... none of this works.  ALSA is pretty frustrating.

How about Jack?
No.

I did get some audio from a loopback device into fldigi.

fldigi capture device Loopback: PCM(hw:0,1)
aplay -D hw:Loopback,0,0 -c 1 ~/test_fp8k.wav
Playing WAVE '/home/mhr/test_fp8k.wav' : Float 32 bit Little Endian, Rate 8000 Hz, Mono

after I set the sample rate explicitly to 48000, then I could do this:
aplay -D hw:Loopback,0,0 -c 1 ~/test_fp.wav
Playing WAVE '/home/mhr/test_fp.wav' : Float 32 bit Little Endian, Rate 48000 Hz, Mono

Then I did this:
mhr@i7 build]$ exp/Audio_test --out0 hw:Loopback,0,0 --out1 hw:Loopback,0,0
linux; GNU C++ version 5.3.1 20160406 (Red Hat 5.3.1-6); Boost_105800; UHD_003.009.004-0-g2b5a88bb

About to open [hw:Loopback,0,0] for output
About to open [default] for capture
Gain set to 0.08
Wow!  the recv buffer isn't ready....
got recv response. 240000 entries
About to call sendBufferReady...
snd_pcm_avail returns EPIPE -- current state is SND_PCM_STATE_XRUN  ready_frames = -32
Exception caught in Audio_test:
	SoDa Object [AudioALSA ALSA Interface] threw exception [AudioALSA::wakeOut() Failed to wake after sleepOut() -- Broken pipe]


---------

It got some audio to FLDIGI, right where it should have been, but
then we failed on wakeup.... sigh.
This appears to be caused by the loopback channel running dry... This
seems to cause the PIPE to be closed and put in a state where we
can't recover. 

-----

OK there is a problem with snd_pcm_start where it returns EPIPE if
a loopback channel doesn't have data ready.  We don't care, so we
(along with lots of other folks, apparently) ignore the error return.

So, now I have something where we can pass a port name on the command
line to route all audio to a designated device.  This isn't exactly
satisfactory.

FLDIGI worked when configured with
configure->soundcard->devices->capture = loopback PCM(hw:0,1)
and SoDaradio was configured with
$ gui/SoDaRadio --audio_out hw:Loopback,0,0 --server=src/SoDaServer

Next, we'll work on audio_in

Well, this isn't going well at all.... do we need to switch to
PulseAudio?

No... we should use pulseaudio as the inter-switch.
[mhr@i7 src]$ sudo dnf install pulseaudio-utils alsa-plugins-pulseaudio pavucontrol pavumeter paman paprefs


OK.... I think I understand now.


0. put this in ~/.asoundrc

pcm.pulse {
  type pulse
}

ctl.pulse {
  type pulse
}

1. For SoDaRadio set the audio_in and audio_out to pulse

start SoDaRadio

2. for wsjtx select audio input and output as "pulse"

3. for fldigi select audio input and output as "pulse"


4. start pavucontrol

under playback and recording, set all devices to "loopback analog" stereo or mono
as appropriate. (recording is "monitor of loopback analog stereo"

configuration: loopback is Analog Stereo Output + Analog Mono Input

------------------------

Holy cow!   I think we can throw all this stuff away and just use
PulseAudio's pavucontrol program.


1. Start SoDaRadio normally.

2. Start fldigi
    configure fldigi
    configure->soundcard->audio->devices   PortAudio capture: Pulse   Playback: Pulse
    configure->soundcard->audio->settings  sample rate "native" for both.

3. start pavucontrol (this may only need to be done once?)
   Playback Alsa plugin [SoDaServer]: built-in Audio digital stereo
   Playback ALSA plug-in [fldigi] : Loopback Analog Stereo

   Recording ALSA plug-in SoDaServer  Monitor of Loopback Analog Stereo
   Recording ALSA plug-in [fldigi] from Monitor of Built-in Audio Digital Stereo (IEC958)



----------------------------

Working on "dynamic range" and related issues.

Tuned to 144.281
Fluke 6080 at 144.280 -35 dBm + 12dB of attenuation
RF gain to max
10Hz spectrogram buckets

Above -47dBm input, the radio saturates and the noise floor
rises > 20dB. 

Power In      Waterfall Peak       SFDR
-47           60                   70
-60           50                   70
-70	      40		   70
-80	      30		   70
-90	      20		   60
-100	      10		   50
-110	      0			   40
-120	      -10		   30
-130	      -20		   20
-140	      -30		   10
-145	      -35.5		   6
-150	      -39		   3

Hmm... a little nonlinearity at the bottom.
But at 625kHz/16Kbuckets -- this is a 38 Hz bucket
Noise power in 38Hz is
-174dBm + 10*log10(38) = -174 + 16 = -158 dBm for the ideal noise floor.
Ours is measured at
-153, giving a noise figure of about 5dB.   Which is pretty darned close
to the spec.

Note though that our maximum signal before distortion is -47dBm and our
MDS is about -150, giving a dynamic range of 103dB.

That's about 17 bits of ADC accuracy.  We started out with 14 bits and
decimated by 100e6/625000 or 160.  log2(160) ~ 7.3 so we should get about
3 extra bits of dynamic range.    And we did.

BTW, the signal pretty much disappears on the waterfall at about -154 dBm
when the window length is 4, but I can see it down to about -157 with a
window length of 12.



-------------------

low HF power is small

best available from tx_waveforms demo
40m 17dBm
30m 19dBm
20m 20dBm

--------------------

-----------------------

March 2018 -- oprofile suggests a few things:

15% of runtime for SoDaServer is in sincos call for the
quadrature oscillator.  Does this suggest that we should
just do the tune-to-baseband step in the USRP?  Probably
not, as the DC balance logic in the FPGA has been known
to cause some confusion, and may not behave in a similar
manner across implementations?

15% of runtime is in fftw -- mostly in Resample625to48
 1         0.1279  SoDaServer               SoDa::Spectrogram::apply_common(std::complex<float>*, unsigned int)
  98       12.5320  SoDaServer               SoDa::Spectrogram::apply_acc(std::complex<float>*, unsigned int, float*, float)
  121      15.4731  SoDaServer               SoDa::BaseBandRX::demodulate(SoDa::SoDaBuf*)
  180      23.0179  SoDaServer               SoDa::BaseBandRX::demodulateSSB(std::complex<float>*, SoDa::Command::ModulationType)
  382      48.8491  SoDaServer               SoDa::ReSample625to48::apply(std::complex<float>*, std::complex<float>*)
206010   14.2674  libfftw3f.so.3.5.5       /usr/lib64/libfftw3f.so.3.5.5
  206010   100.000  libfftw3f.so.3.5.5       /usr/lib64/libfftw3f.so.3.5.5 [self]

10% of runtime is in complex mul -- almost all in doMixer (23%) and Resampler::apply (66%)
This suggests that the resampler might benefit from a multi-rate filter approach.

Finally, the delay in passing samples through the filters and resamplers
may be contributing to troubles with FT8 -- the RX processing delay is
very long.  This is likely caused by excessive buffering delays given the
requirements of the overlap-and-save implementation. (It works on
complete buffers.)

So, the next bit of work:
0. Look at NCO alternatives to sincos... 
1. Build a resampler that is a polyphase filter.
2. Generify the resampler so that we can pick a
frequency domain or time domain resampler at
run time.
3. Reimplement the filters in the same way.
4. Look at improving the baseband mixer/oscillator to
reduce the amount of compute time spent on sincos
and complex mul.

Turning on "ffast-math" gets us to an interesting point -- sincos is
now 30% of the run time, and libfftw3f is 35%.


Task 0: NCO

NCOexp in the exp directory compares a recursive NCO (y[n] = e^jw * y[n-1]),
with gain correction at 2048 sample intervals, to a sincos implementation.
100e6 iterations of sincos takes about 3 seconds, while the recursive
implementation takes just 0.4 seconds.  There is some small accumulated
error, but this is as likely attributable to the angle accumulation
as it is to errors in the recursion.

It is very clear that the recursive NCO is a far better approach. 

Now that QuadratureOscillator.hxx has been changed to a recursive
oscillator, libfftw3f takes up <half> the compute time in SoDaServer
with another 10% in the resampler::apply function.  This is where
one would expect it to be, given the great reliance on frequency
domain filters. 


--------------------------


WSJTX (Mar 2018)  When running WSJTX, note that it <must>
use its own hamlib library to talk via netrigctl, otherwise
it breaks the connection with a complaint of "Protocol error"
relating to getting a vfo setting.

Building WSJTx from scratch requires building <their> version
of hamlib and installing it in a local dir.  Then remove the
libhamlib....so... files from that local dir to prevent
linking dynamically.

=---------------------

In designing the new time-domain resampler:

We need to get from 625kSamp/sec to 48kSamp/sec.

625 = 5 * 5 * 5 * 5
48 = 1 * 3 * 4 * 4

The sample rate sequence is then

625k 125k 75k 60k 48k

Used the Iowa Hills filter design software to create the
prototype filters.

from the commit message: 
    Filled out time domain resampler to get from 625 to 48... This is
    the RX side resampler.  It is about 3x faster than the FFT based
    resampler, but does not have the steep skirts or bodacious out-of-band
    suppression.  However, the actual suppresion is more than adequate, with
    the major alias peaks 80dB down from center.
    The attenuation at +/- 24kHz is only -46dB which is a little
    disappointing, but we could improve that a bit with some additional
    filter taps in the last stage.
    
    Tuning and optimization improved rejection beyond 24kHz a little bit.
    Current performance advantage is still about 3x.  Vector instructions
    may improve things if the order of the subfilters is inverted (to allow
    the filter application to become a dot product, rather than a convolution.)

With the FFT based resampler, SoDaServer consumes about 58% of the my vitage
i7 920 cpu at 2.7 GHz throttled down to about 1.7 GHz.

