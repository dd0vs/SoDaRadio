tuning bug -- UBX
tune to 50.150 (at center) then
50.096 and get the deadly red band.


 ( 12 + 144 + 20 + 3 * sqrt(4) ) / 7) + 5 * 11 = 9 ^ 2 + 0

limeric
a dozen a gross and a score
plus three times the square root of four
divided by seven
plus five times eleven

last line:  "is nine squared and not a bit more"

--------------------

Loopback audio modifications

There are applications for SoDaRadio that require it to send
its audio to a loopback device so that another program can
process it (e.g. fldigi, wsjt...) and to listen on a loopback
device to handle audio produced by a second program.

ALSA isn't very helpful, and we're not going back to PA.

There are lots of ways to do fancy configuration in ALSA to
make this work, but alas, all of them are delicate, poorly documented,
irrational, and <rant> generally representative of the sorry state of linux
audio support. </endrant>

The simple thing would be to have AudioRX open two outbound ports, and
AudioTX open two inbound ports.   Sigh, that doesn't work for spit.
ALSA doesn't like two ports open from the same process.  

I could modify Audio?X to disconnect from one port and open another, and
that sounds like the simplest choice...

Sigh... none of this works.  ALSA is pretty frustrating.

How about Jack?
No.

I did get some audio from a loopback device into fldigi.

fldigi capture device Loopback: PCM(hw:0,1)
aplay -D hw:Loopback,0,0 -c 1 ~/test_fp8k.wav
Playing WAVE '/home/mhr/test_fp8k.wav' : Float 32 bit Little Endian, Rate 8000 Hz, Mono

after I set the sample rate explicitly to 48000, then I could do this:
aplay -D hw:Loopback,0,0 -c 1 ~/test_fp.wav
Playing WAVE '/home/mhr/test_fp.wav' : Float 32 bit Little Endian, Rate 48000 Hz, Mono

Then I did this:
mhr@i7 build]$ exp/Audio_test --out0 hw:Loopback,0,0 --out1 hw:Loopback,0,0
linux; GNU C++ version 5.3.1 20160406 (Red Hat 5.3.1-6); Boost_105800; UHD_003.009.004-0-g2b5a88bb

About to open [hw:Loopback,0,0] for output
About to open [default] for capture
Gain set to 0.08
Wow!  the recv buffer isn't ready....
got recv response. 240000 entries
About to call sendBufferReady...
snd_pcm_avail returns EPIPE -- current state is SND_PCM_STATE_XRUN  ready_frames = -32
Exception caught in Audio_test:
	SoDa Object [AudioALSA ALSA Interface] threw exception [AudioALSA::wakeOut() Failed to wake after sleepOut() -- Broken pipe]


---------

It got some audio to FLDIGI, right where it should have been, but
then we failed on wakeup.... sigh.
This appears to be caused by the loopback channel running dry... This
seems to cause the PIPE to be closed and put in a state where we
can't recover. 

-----

OK there is a problem with snd_pcm_start where it returns EPIPE if
a loopback channel doesn't have data ready.  We don't care, so we
(along with lots of other folks, apparently) ignore the error return.

So, now I have something where we can pass a port name on the command
line to route all audio to a designated device.  This isn't exactly
satisfactory.

FLDIGI worked when configured with
configure->soundcard->devices->capture = loopback PCM(hw:0,1)
and SoDaradio was configured with
$ gui/SoDaRadio --audio_out hw:Loopback,0,0 --server=src/SoDaServer

Next, we'll work on audio_in

Well, this isn't going well at all.... do we need to switch to
PulseAudio?

No... we should use pulseaudio as the inter-switch.
[mhr@i7 src]$ sudo dnf install pulseaudio-utils alsa-plugins-pulseaudio pavucontrol pavumeter paman paprefs


OK.... I think I understand now.


0. put this in ~/.asoundrc

pcm.pulse {
  type pulse
}

ctl.pulse {
  type pulse
}

1. For SoDaRadio set the audio_in and audio_out to pulse

start SoDaRadio

2. for wsjtx select audio input and output as "pulse"

3. for fldigi select audio input and output as "pulse"


4. start pavucontrol

under playback and recording, set all devices to "loopback analog" stereo or mono
as appropriate. (recording is "monitor of loopback analog stereo"

configuration: loopback is Analog Stereo Output + Analog Mono Input

------------------------

Holy cow!   I think we can throw all this stuff away and just use
PulseAudio's pavucontrol program.


1. Start SoDaRadio normally.

2. Start fldigi
    configure fldigi
    configure->soundcard->audio->devices   PortAudio capture: Pulse   Playback: Pulse
    configure->soundcard->audio->settings  sample rate "native" for both.

3. start pavucontrol (this may only need to be done once?)
   Playback Alsa plugin [SoDaServer]: built-in Audio digital stereo
   Playback ALSA plug-in [fldigi] : Loopback Analog Stereo

   Recording ALSA plug-in SoDaServer  Monitor of Loopback Analog Stereo
   Recording ALSA plug-in [fldigi] from Monitor of Built-in Audio Digital Stereo (IEC958)



----------------------------

Working on "dynamic range" and related issues.

Tuned to 144.281
Fluke 6080 at 144.280 -35 dBm + 12dB of attenuation
RF gain to max
10Hz spectrogram buckets

Above -47dBm input, the radio saturates and the noise floor
rises > 20dB. 

Power In      Waterfall Peak       SFDR
-47           60                   70
-60           50                   70
-70	      40		   70
-80	      30		   70
-90	      20		   60
-100	      10		   50
-110	      0			   40
-120	      -10		   30
-130	      -20		   20
-140	      -30		   10
-145	      -35.5		   6
-150	      -39		   3

Hmm... a little nonlinearity at the bottom.
But at 625kHz/16Kbuckets -- this is a 38 Hz bucket
Noise power in 38Hz is
-174dBm + 10*log10(38) = -174 + 16 = -158 dBm for the ideal noise floor.
Ours is measured at
-153, giving a noise figure of about 5dB.   Which is pretty darned close
to the spec.

Note though that our maximum signal before distortion is -47dBm and our
MDS is about -150, giving a dynamic range of 103dB.

That's about 17 bits of ADC accuracy.  We started out with 14 bits and
decimated by 100e6/625000 or 160.  log2(160) ~ 7.3 so we should get about
3 extra bits of dynamic range.    And we did.

BTW, the signal pretty much disappears on the waterfall at about -154 dBm
when the window length is 4, but I can see it down to about -157 with a
window length of 12.



-------------------

low HF power is small

best available from tx_waveforms demo
40m 17dBm
30m 19dBm
20m 20dBm

--------------------

-----------------------

March 2018 -- oprofile suggests a few things:

15% of runtime for SoDaServer is in sincos call for the
quadrature oscillator.  Does this suggest that we should
just do the tune-to-baseband step in the USRP?  Probably
not, as the DC balance logic in the FPGA has been known
to cause some confusion, and may not behave in a similar
manner across implementations?

15% of runtime is in fftw -- mostly in Resample625to48
 1         0.1279  SoDaServer               SoDa::Spectrogram::apply_common(std::complex<float>*, unsigned int)
  98       12.5320  SoDaServer               SoDa::Spectrogram::apply_acc(std::complex<float>*, unsigned int, float*, float)
  121      15.4731  SoDaServer               SoDa::BaseBandRX::demodulate(SoDa::SoDaBuf*)
  180      23.0179  SoDaServer               SoDa::BaseBandRX::demodulateSSB(std::complex<float>*, SoDa::Command::ModulationType)
  382      48.8491  SoDaServer               SoDa::ReSample625to48::apply(std::complex<float>*, std::complex<float>*)
206010   14.2674  libfftw3f.so.3.5.5       /usr/lib64/libfftw3f.so.3.5.5
  206010   100.000  libfftw3f.so.3.5.5       /usr/lib64/libfftw3f.so.3.5.5 [self]

10% of runtime is in complex mul -- almost all in doMixer (23%) and Resampler::apply (66%)
This suggests that the resampler might benefit from a multi-rate filter approach.

Finally, the delay in passing samples through the filters and resamplers
may be contributing to troubles with FT8 -- the RX processing delay is
very long.  This is likely caused by excessive buffering delays given the
requirements of the overlap-and-save implementation. (It works on
complete buffers.)

So, the next bit of work:
0. Look at NCO alternatives to sincos... 
1. Build a resampler that is a polyphase filter.
2. Generify the resampler so that we can pick a
frequency domain or time domain resampler at
run time.
3. Reimplement the filters in the same way.
4. Look at improving the baseband mixer/oscillator to
reduce the amount of compute time spent on sincos
and complex mul.

Turning on "ffast-math" gets us to an interesting point -- sincos is
now 30% of the run time, and libfftw3f is 35%.


Task 0: NCO

NCOexp in the exp directory compares a recursive NCO (y[n] = e^jw * y[n-1]),
with gain correction at 2048 sample intervals, to a sincos implementation.
100e6 iterations of sincos takes about 3 seconds, while the recursive
implementation takes just 0.4 seconds.  There is some small accumulated
error, but this is as likely attributable to the angle accumulation
as it is to errors in the recursion.

It is very clear that the recursive NCO is a far better approach. 

Now that QuadratureOscillator.hxx has been changed to a recursive
oscillator, libfftw3f takes up <half> the compute time in SoDaServer
with another 10% in the resampler::apply function.  This is where
one would expect it to be, given the great reliance on frequency
domain filters. 


--------------------------


WSJTX (Mar 2018)  When running WSJTX, note that it <must>
use its own hamlib library to talk via netrigctl, otherwise
it breaks the connection with a complaint of "Protocol error"
relating to getting a vfo setting.

Building WSJTx from scratch requires building <their> version
of hamlib and installing it in a local dir.  Then remove the
libhamlib....so... files from that local dir to prevent
linking dynamically.

=---------------------

In designing the new time-domain resampler:

We need to get from 625kSamp/sec to 48kSamp/sec.

625 = 5 * 5 * 5 * 5
48 = 1 * 3 * 4 * 4

The sample rate sequence is then

625k 125k 75k 60k 48k

Used the Iowa Hills filter design software to create the
prototype filters.

from the commit message: 
    Filled out time domain resampler to get from 625 to 48... This is
    the RX side resampler.  It is about 3x faster than the FFT based
    resampler, but does not have the steep skirts or bodacious out-of-band
    suppression.  However, the actual suppresion is more than adequate, with
    the major alias peaks 80dB down from center.
    The attenuation at +/- 24kHz is only -46dB which is a little
    disappointing, but we could improve that a bit with some additional
    filter taps in the last stage.
    
    Tuning and optimization improved rejection beyond 24kHz a little bit.
    Current performance advantage is still about 3x.  Vector instructions
    may improve things if the order of the subfilters is inverted (to allow
    the filter application to become a dot product, rather than a convolution.)

With the FFT based resampler, SoDaServer consumes about 58% of the my vitage
i7 920 cpu at 2.7 GHz throttled down to about 1.7 GHz.

--------------------

5.2.0 adds CARRIER/BEACON mode for tuning up.
Measurements with TX gain set to "11" and a 30dB+ pad
between the UBX and a Tek 492

	     max     min
3.5 MHz	     txpower at max produces many harmonics
    	     tx power below saturation is 8dBm out,
	     harmonic at 7MHz is only 20dB down
	     0dBm out, harmonics are 25dB down or so.
	     
7 MHz	     10dBm out, 14MHz is 30dB down .. 21 > 40dB down
  	     8dBm  all harmonics > 40dB down
	     
14 MHz	     max power 20dBm but 2 and 42 are at 0dBm.
   	     at 10dBm both are > 40dB down.
	     compression starts at around 15dBm...
	     
50 MHz	     15dBm out, 100MHz is > 40dB down
144 MHz	     max power is 18dBm with harmonics
    	     432 spur is -30dB ...
	     15dBm out, no spurs.
	     

222 MHz	     max 18dBm harmonics are < 30dB down
    	     15dBm harmonics disappear > 40dB

432 MHz	     max 15dBm no harmonics (> 40dB)

902 MHz      15dBm clean (> 40dB down)
    	     There is a spur at 892 that is only -35dB.
	     Driving a little lighter (13dB?) makes the spur
	     drop below -40dB. 

1296 MHz     max power is about 15dBm
 	     at 12dBm no spurs close in (within 50 MHz > 40dB down)
	     harmonic at 3.9 is < 20dB down.
	     
	     
2304 MHz     at 12dBm no spurs close in (within 50 MHz > 40dB down)
     	     all harmonics > 40dB down

3456 MHz     10dBm out, max. spur about 30dB down at about 5MHz below carrier.
     	     spur persists at 0dBm ...

5760.1 MHz   -10dBm out at max.  This may be due to the attenuators
             dropping out above 4GHz or so...
	     Yup.. Taking out 15dB got us up to -5dBm
	     No pads -- 0dBm ... hmmm... what's going on here...?
	     close in spurs are -20dB
	     at -20dBm out, the spurs are down ~ 30dB
	     spurs are 2.5MHz above the carrier.


Hmmmm... can we use "sidetone" volume (feedthrough from TX to RX)
to detect the point at which the transmitter becomes non-linear?



----------------------

January 2019  SoDaRadio version 6.2.0 -- audio tuning branch


Noticed spurs about 50kHz above the carrier when transmitting a test
tone from WSJT on 20m. (N200 with UBX into a 10W amp.)  The spurs were
seen 'over-the-air' from an RX antenna connected to a spectrum analyzer.
The transmit power was adjusted to be well below P1dB -- this is not a
linearity issue.  The WSJT audio level was varied, the spurs were
still there -- less than 40dB below the carrier.  Alas, 47 CFR 97.307
require the spurs to be at least 43dB...

These spurs are not present without the amplifier -- that's good news,
as it means that the problem is in the power amplifier.  50kHz is a hint
that we may be looking at power supply noise.  That can be fixed.

The harmonic at 28MHz is only 25 dB down, but the LPF at the amplifier
will deal with that. 

However, a more worrying spur appears about 1.5 MHz below the carrier.
This appears both for WSJT's test tone and for a CW note.

A raw carrier with the TX gain at max shows the spur at just 40dB down
(no amplifier).  There are actually TWO spurs, one above the carrier
and one below. The lower spur is about 3dB stronger.

And now for the odd part --
If I use the tx_waveforms example program with these switches
--rate 625e3 --freq 14.095e6 --gain 100 --int-n
I get a very nice 20dBm tone with no spurs.  The harmonic at 28 is about
25dB down.

But no spurs at +/- 1.5 MHz.   What's that about?

So I turned off int-n tuning.  No change -- crystal clear.

Now what's different for SoDaRadio?  The TX RF part is pretty much the same
as tx_waveforms -- no special magic (as far as I can recall).

Another bit of evidence -- the spur appears in SoDaRadio as soon as the
PTT switch is pressed -- that is, no modulation is required.  At max TX power
the spur is -12dBm +/-... If TX power is set 10dB down from max, the spur drops
down to -20dBm.... at TX power 20dB below max, the spur is at about -30dBm.
(Carrier power is 21 dBm 16dBm, and 8 dBm respectively)  TX power should be
set to about -6dB for linear behavior.

At TX = -6dB below max, turning on the carrier causes the spur to drop by
about 1dB.  (hard to measure on the spectrum analyzer). 

The spur appears regardless of mode -- USB and CW_U, LSB, CW_L, AM,
and even NBFM. (Though the NBFM output is an extra 10dB down, it is
still a dumpster fire -- this needs a closer look.  At the levels I'm
seeing, the UBX output is legal (about -40dBc relative to 20dBm gets
us -20dBm -- the limit is -40dBc or -20dBm, whichever is larger.  The
rule is a little complicated.)

Hmmm... So.. could this be bleed-through from the RX local oscillator?
Reference noise?  A difference in tuning settings?

First, let's print out the TX settings each time PTT is activated -- 

So, on TX we got new freq 1.40956e7
t.rf 1.25e7 a.rf 1.25e7 t.dsp 1.5956e6 a.dsp 1.5956e6

(t. is requested, a. is actual... )
So the transmit LO is at 1.25e7 MHz.  That is dead-nuts on the spur.

So, what happens if we set the TX frequency to 15.095 MHz?
The tuning settings were
rf = 1.25e7 dsp 3.5955e6  and that's where the spur is. 

how about 20 MHz?
rf = 25MHz, dsp = 4.90045MHz
And that's where the spur is.

So this is LO leakage from the TX chain.

In looking at the USRPCtrl set1stLOFreq method, the TX side does use
a 12.5 MHz step size for the reference frequency.  This might be a little
too big for good spur suppresion.  Now the tuning for 14MHz uses an RF
tuning of 0MHz... .!

No spur.

Same for 20MHz.

At 28 MHz, there is a spur at 50 MHz as we have a tuning setting
of rf = 50e6 dsp = -21.9e6

Hmmmm... What happens if we don't do intN at all?
When we use tx_waveforms, we see the 50MHz spur for a 28 MHz setting.
We see a 100MHz spur for 78 MHz ... So this is RF oscillator bleed through.

So, testing this with SoDa where we just use the default tuning (no int-n)
for transmit, the spurs are well within limits -- the RF oscillator steps
at 12.5 kHz and gets suppressed by 50+ dB... yahoo!

Ahhh.. but at 14.095 MHz the LO feed through is just 4kHz away and is only
-40dBc... sigh.   Below 50MHz, we really should use int-n and take advantage
of the fact that the RF oscillator will be either 0MHz or 50MHz. 

So, for now, we test for HF and don't apply the LO correction if the
requested frequency is below 30MHz, since many good configurations rely
solely on low-pass filters in the transmit chain, to elminate harmonics.
Above 30MHz, most ham bands are suitably far enough from the reference that
we're going to be OK.  On the 6m band, the RF oscillator will be up at
62.5MHz, suitably far from the carrier that any spur should have been
taken out by BPFs along the way.

So, the spurs in the HF band are fixed with version 6.3.0

-----------

Now with WSJTx and the new TX indication... We're linear at 18dBm with TX set
to -3dB and audio at full.  Or audo at -3 and TX at 0  .... as long as the
sum is -3dB.

Hmmmm.. that sounds familiar.

--------

Next we need to look at that 50kHz spur again.  These only happen with
the linear amplifier in the line.  (It is a K5BCQ 20W amplifier, but I
keep the output to about 1W.)  And holy stromboli there is a lot of
hash around the carrier.  What happens if we swap out the power
supply?

This appears to be a problem in the amplifier.  I think there may be
insufficient decoupling?  The spurs may not fall linearly with the carrier,
but if not, they're pretty close.  Driving the amplifier with the ASTRON
RS-20M (it loafs along at < 2A) didn't improve things.  There appears
to be lots of random noise +/- 1MHz from the carrier.  Outside of this
things are pretty clean.

Most of the noise is +/- 200kHz -- This looks on the 20kHz/box sweep
like amplitude modulation of two tones at 65kHz and 75kHz.  and multiples
of 75 kHz... This does not appear to be a switcher...  The products are
less than 30dB down from the carrier, which is way out of bounds.

These products are <not> present in the output of the N200, so they are
created in the "linear" amplifier.  Debug is required.

Note that the WA6PWW 10W amplifier doesn't show this hash, but it is
awful... Way too much gain and it generates spurs of its own around 4MHz.

So, I ought to fix the BCQ amp -- it is a much better design and worth
the trouble. It sounds like it might be oscillating -- the decoupling
chain after the last 10-20uH choke is all 0.1, 0.01, and 0.001 uF
caps.  That puts the corner frequency at about 150kHz... pushing that down
a bit with a 1uF cap should not be a big deal.  

The actual problem was a missing strap to put the amplifier in AB mode rather
than C... sigh. I wonder how long that had been going on?

New measurements show a spur at 60+kHz from the carrier (up and down) that is
more than 43 dB down at 1W out.  At 2.5W out (TX power -8dB down from UBX max)
we're almost 50dB down.  So this may be a power supply issue...?  or noise from
the voltage regulator? (There's a 78l06 in the bias suply that is bypassed with
10uF and 100nF... which ought to be enough at 65kHz... but who knows...


------
