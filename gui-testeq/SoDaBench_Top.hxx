#ifndef __SoDaBench_Top__
#define __SoDaBench_Top__
/*
  Copyright (c) 2012, Matthew H. Reilly (kb1vc)
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
   @file
   Subclass of SoDaBenchFrame, which is generated by wxFormBuilder.
*/

#include "SoDaBench_GUI.h"
#include "../src/UDSockets.hxx"
#include "../src/Command.hxx"
#include <map>
#include <fstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/format.hpp>
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/wxchar.h>

namespace SoDaBench_GUI {
  
  class SweeperDialog;
  class SpectrumAnalyzerDialog;

  /**
   * The SoDaBench object
   *
   * The SoDaBench program provides a wxWidgets based GUI to control
   * the SoDa bench test equipment. SoDaBench is partitioned into
   * three major components
   *
   * @li The Application object defined in SoDaBench_App that launches the 
   * main GUI control thread defined by SoDaBench_Top
   * @li the BenchListenener object that connects to the SoDa::UI thread.
   * @li the wxWidgets GUI event loop that dispatches user requests
   * through the SoDaBench_Top thread.
   */
  class SoDaBench_Top : public SoDaBenchFrame
  {
    friend class SweeperDialog;
    friend class SpectrumAnalyzerDialog;
  protected:
    // Handlers for SoDaBenchFrame events.
    void OnOpenConfig( wxCommandEvent& event );
    void OnSaveConfig( wxCommandEvent& event );
    void OnSaveConfigAs( wxCommandEvent& event );
    void OnQuit( wxCommandEvent& event );
    void OnAbout( wxCommandEvent & event);
    void OnUserGuide( wxCommandEvent & event);

    void OnInstSel( wxCommandEvent & event);

  public:

  private:

  };

  class AboutDialog : public m_AboutDialog {
  public:

  AboutDialog(wxWindow * parent, char * SDR_version_string) : m_AboutDialog(parent) {
      // setup the gui version string
      std::string guiv = (boost::format("GUI Version: %s SVN %s") % PACKAGE_VERSION % SVN_VERSION).str();
      wxString wxver(guiv.c_str(), wxConvUTF8);
      m_GUIVersion->SetLabel(wxver);
      std::string sdrv = (boost::format("SDR Version: %s") % SDR_version_string).str();
      wxString wxsdr(sdrv.c_str(), wxConvUTF8);
      m_SDRVersion->SetLabel(wxsdr); 
    }
    void OnAboutOK( wxCommandEvent & event); 
  
  };

  class NewConfigDialog : public m_NewConfigDialog {
  public:
  NewConfigDialog(wxWindow * parent, SoDaBench_Top * _bench) : m_NewConfigDialog(parent) {
      bench = _bench; 
    }
    void OnCreateConfigDefault( wxCommandEvent & event);
    void OnDismissCreateConfigDefault( wxCommandEvent & event);
    SoDaBench_Top * bench; 
  };
  
  class ControlsDialog : public m_ControlsDialog {
  public:
    ControlsDialog(wxWindow * parent, SoDaBench_Top * bench);


    float getCWSpeed() { return m_CWSpeed->GetValue(); }
    void setCWSpeed(float s) {
      m_CWSpeed->SetValue(s);
      wxScrollEvent nullSE;
      OnCWSpeed(nullSE);
    }
  
    float getSTGain() { return m_STGain->GetValue(); }
    void setSTGain(float v) {
      m_STGain->SetValue(v);
      wxScrollEvent nullSE;
      OnSTGainScroll(nullSE);
    }
  
    void setTXPower(double v) {
      m_TXPower->SetValue(v);
      wxScrollEvent nullSE; 
      OnTXPower(nullSE); 
    }
  
    // power conversion
    float powerToTXSetting(float fpow) {
      // take power in dBm and convert to
      // settings for TX
      return (0.6 * fpow + 10.0); 
    }
    float txSettingToPower(float setting) {
      // take power in dBm and convert to
      // settings for TX
      return ((setting - 10.0) / 0.6); 
    }

  private:
    SoDaBench_Top * bench_top; 

    void OnSTGainScroll(wxScrollEvent & event);
    void OnCWSpeed(wxScrollEvent & event);
    void OnTXPower( wxScrollEvent & event);
    void OnCtrlDone( wxCommandEvent & event );
  };

  class TuningDialog : public m_TuningDialog {
  public:
    TuningDialog(wxWindow *parent, SoDaBench_Top * bench);

    void newTXFreq() {
      tx[0]->newFreq();     
    }
    void newRXFreq() {
      rx[0]->newFreq();     
    }

    bool getExtRefEna() { return m_ExtRefEn->GetValue(); }
    void setExtRefEna(bool v) {
      wxCommandEvent nullCE;
      m_ExtRefEn->SetValue(v);
      OnExtRefEna(nullCE);
    }
  
  private:
    // Tuner structures. 
    std::map<wxWindow *, TunerDigit *> rx_tuner, tx_tuner;
    TunerDigit * rx[11], * tx[11];
    SoDaBench_Top * bench_top; 

    void OnDigitUp( wxCommandEvent& event );
    void OnDigitDown( wxCommandEvent& event );
    void OnTuningDone( wxCommandEvent & event );

    void OnCopyTXtoRX( wxCommandEvent& event );
    void OnCopyRXtoTX( wxCommandEvent& event );

    void OnLastTX( wxCommandEvent& event );
    void OnLastRX( wxCommandEvent& event );

    // external reference and LO calib
    void OnExtRefEna(wxCommandEvent & event);
    void OnTransvLOCal(wxCommandEvent & event);
  };

  class LogDialog : public m_LogDialog {
  public:
  LogDialog(wxWindow * parent, SoDaBench_Top * bench) :
    m_LogDialog(parent) {
      bench_top = bench;
      log_ena = false; 
    }
  
    void OnLogOK( wxCommandEvent & event);
    void OnLogCellChange( wxGridEvent & event); 
    void SaveContact(const wxString & time,
		     const wxString & from_call,
		     const wxString & from_grid,
		     const wxString & to_call,
		     const wxString & to_grid,
		     const wxString & mode,
		     double tx_freq,
		     double rx_freq,
		     const wxString & dist);
    void SaveComment(const wxString & comment); 

    unsigned int getNumEntries() {
      return m_LogGrid->GetNumberRows(); 
    }

    void scrollToBottom() {
      m_LogGrid->MakeCellVisible(m_LogGrid->GetNumberRows(), 1);
    }

    /// set two streams -- the log stream that gets the complete
    /// log, and the checkpoint stream that gets each entry as it
    /// is written.  (The logstream contains the edited contents.)

    void closeLog() {
      if(log_ena) {
	saveLog(); 
	logst.close();
	ckpst.close(); 
      }
    }
  
    void openLog(const std::string & basename)
    {
      closeLog();
      readLog(basename);
    
      logst.open(basename.c_str(), std::fstream::out);
      if(logst.is_open()) {
	logst << "foo" << std::endl;
      }
      else {
	std::cerr << "logst open failed on file " << basename
		  << " with failbits set to " << (hex) << logst.rdstate()
		  << std::endl; 
      }
      std::string ckpname = basename + "_ckp"; 
      ckpst.open(ckpname.c_str(), std::fstream::out | std::fstream::app);

      log_ena = true; 
    }

    void readLog(const std::string & basename); 
    void saveLog();
    void checkpointLog();
  
  private:
    SoDaBench_Top * bench_top;
    std::fstream logst, ckpst;
    bool log_ena; 
  };

  class BandConfigDialog : public m_BandConfigDialog {
  public:
  BandConfigDialog(wxWindow * parent, SoDaBench_Top * bench) :
    m_BandConfigDialog(parent) {
      bench_top = bench;
    }

    void OnBandOK( wxCommandEvent & event);
    void OnBandCancel( wxCommandEvent & event);
    void OnTransverterModeSel( wxCommandEvent & event);

    void OnConfigChoice( wxCommandEvent & event); 
    void OnBandActivate( wxCommandEvent & event);

    void OnProblem(std::string const & probstring); 


    /// load the configuration list with the bands we know about.
    void initBandList(SoDaBench_BandSet * bandset);

    void clearTextBoxes() {
      m_BandName->Clear();
      m_low_edge->Clear();
      m_high_edge->Clear();
    }

    void setChoiceBox(wxChoice * box, std::string & sel);
    
  private:
    SoDaBench_Top * bench_top;
    SoDaBench_BandSet * bands;
  }; 


  class BandConfigProblem : public m_BandConfigProblem {
  public:

  BandConfigProblem(wxWindow * parent, const char * probstring) : m_BandConfigProblem(parent) {
      // setup the gui version string
      wxString wxver(probstring, wxConvUTF8);
      m_BandConfigReason->SetLabel(wxver);
    }
    void OnBandErrorOK( wxCommandEvent & event); 
  
  };
}
#endif // __SoDaBench_Top__
