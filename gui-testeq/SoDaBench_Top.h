#ifndef __SoDaBench_Top__
#define __SoDaBench_Top__
/*
  Copyright (c) 2012, Matthew H. Reilly (kb1vc)
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
  Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
   @file
   Subclass of SoDaBenchFrame, which is generated by wxFormBuilder.
*/

#include "SoDaBench_GUI.h"
#include "../src/UDSockets.hxx"
#include "../src/Command.hxx"
#include "../gui/GuiParams.hxx"
#include "../gui/xyplot.hxx"
#include "../gui/waterfall.hxx"
#include "../gui/GraphClient.hxx"

#include <map>
#include <fstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/format.hpp>
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/wxchar.h>

namespace SoDaBench_GUI {
  
  /**
   * The SoDaBench object
   *
   * The SoDaBench program provides a wxWidgets based GUI to control
   * the SoDa bench test equipment. SoDaBench is partitioned into
   * three major components
   *
   * @li The Application object defined in SoDaBench_App that launches the 
   * main GUI control thread defined by SoDaBench_Top
   * @li the BenchListenener object that connects to the SoDa::UI thread.
   * @li the wxWidgets GUI event loop that dispatches user requests
   * through the SoDaBench_Top thread.
   */
  class SpectrumAnalyzerDialog;
  class SweeperDialog;
  class BenchListenerThread;
  class SoDaBench_Top : public SoDaBenchFrame, public SoDaRadio_GUI::GraphClient
  {
  public:
    SoDaBench_Top(SoDa::GuiParams & params, wxWindow * parent);
    friend class SweeperDialog;
    friend class SpectrumAnalyzerDialog;

    SoDa::UD::ClientSocket * GetCmdQueue() { return soda_bench; }
    SoDa::UD::ClientSocket * GetFFTQueue() { return soda_fft; }

    double getRXOffset() { return 0.0; }
    
    bool CreateSpectrumTrace(double * freqs, float * powers, unsigned int len);

    enum MSG_ID { MSG_UPDATE_SPECTRUM, MSG_HANDLE_CMD, MSG_UPDATE_GPSLOC, MSG_UPDATE_GPSTIME, MSG_TERMINATE_TX };

    void sendMsg(SoDa::Command * cmd) {
      soda_bench->put(cmd, sizeof(SoDa::Command)); 
    }
    
  protected:
    // Handlers for SoDaBenchFrame events.
    void OnOpenConfig( wxCommandEvent& event );
    void OnSaveConfig( wxCommandEvent& event );
    void OnSaveConfigAs( wxCommandEvent& event );
    void OnQuit( wxCommandEvent& event );
    void OnAbout( wxCommandEvent & event);
    void OnUserGuide( wxCommandEvent & event);

    void OnInstSel( wxCommandEvent & event);

    void unsupportedEvent(const std::string & str);

    SoDaRadio_GUI::XYPlot * pgram_plot;
    SoDaRadio_GUI::Waterfall * wfall_plot;
    // the trace
    SoDaRadio_GUI::XYPlot::Trace * pgram_trace; 

  protected:
    std::string SDR_version_string; 
    
  private:
    
    bool debug_mode; 
    void setupServer();
    void initListener();

    SpectrumAnalyzerDialog * spec_analyzer_a; 
    SpectrumAnalyzerDialog * spec_analyzer_b; 
    SweeperDialog * sweeper_a; 
    SweeperDialog * sweeper_b;

    SoDa::UD::ClientSocket * soda_bench;
    SoDa::UD::ClientSocket * soda_fft;

    SoDa::GuiParams params;

    BenchListenerThread * listener;
  };

  class AboutDialog : public m_AboutDialog {
  public:

  AboutDialog(wxWindow * parent, char * SDR_version_string) : m_AboutDialog(parent) {
      // setup the gui version string
      std::string guiv = (boost::format("GUI Version: %s SVN %s") % PACKAGE_VERSION % SVN_VERSION).str();
      wxString wxver(guiv.c_str(), wxConvUTF8);
      m_GUIVersion->SetLabel(wxver);
      std::string sdrv = (boost::format("SDR Version: %s") % SDR_version_string).str();
      wxString wxsdr(sdrv.c_str(), wxConvUTF8);
      m_SDRVersion->SetLabel(wxsdr); 
    }
    void OnAboutOK( wxCommandEvent & event) {
      if(IsModal()) EndModal(wxID_OK);
      else {
	SetReturnCode(wxID_OK);
	this->Show(false);
      }
    }
  
  };

  class NewConfigDialog : public m_NewConfigDialog {
  public:
  NewConfigDialog(wxWindow * parent, SoDaBench_Top * _bench) : m_NewConfigDialog(parent) {
      bench = _bench; 
    }
    void OnCreateConfigDefault( wxCommandEvent & event);
    void OnDismissCreateConfigDefault( wxCommandEvent & event);
    SoDaBench_Top * bench; 
  };

  class SweeperDialog : public m_SweeperDialog {
  public:
  SweeperDialog(wxWindow * parent, const std::string & TX_channel, SoDaBench_Top * _bench) : m_SweeperDialog(parent) {
      bench = _bench;
      tx_channel = TX_channel;
    }
    SoDaBench_Top * bench;
    std::string tx_channel; 
  };

  class SpectrumAnalyzerDialog : public m_SpectrumAnalyzerDialog {
  public:
  SpectrumAnalyzerDialog(wxWindow * parent, const std::string & RX_channel, SoDaBench_Top * _bench) : m_SpectrumAnalyzerDialog(parent) {
      bench = _bench;
      rx_channel = RX_channel; 
    }
    SoDaBench_Top * bench;
    std::string rx_channel;
  }; 
}  
#endif // __SoDaBench_Top__
